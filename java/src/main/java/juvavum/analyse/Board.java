package juvavum.analyse;

import juvavum.graph.SimpleEdge;
import org.jgrapht.Graph;
import org.jgrapht.graph.SimpleGraph;

/**
 * Representation of a board as a bitset.
 *
 * <p>The value of a board is stored in a long. Each bit is set if the field is filled and 0 if
 * empty. This supports boards with up to 63 fields.
 *
 * @author Martin Schneider, mart.schneider@gmail.com
 */
public class Board {

  // lookup table to mirror rows around their center
  // the first index is the length of the row, the second its binary value
  // the value at those indices is the binary representation of the row mirrored
  // around its center
  // these values are pre-computed for rows up to 10 fields wide
  public static final int[][] FLIPLR =
      new int[][] {
        {},
        {0, 1},
        {0, 2, 1, 3},
        {0, 4, 2, 6, 1, 5, 3, 7},
        {0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15},
        {
          0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30, 1, 17, 9, 25, 5, 21, 13, 29, 3,
          19, 11, 27, 7, 23, 15, 31
        },
        {
          0, 32, 16, 48, 8, 40, 24, 56, 4, 36, 20, 52, 12, 44, 28, 60, 2, 34, 18, 50, 10, 42, 26,
          58, 6, 38, 22, 54, 14, 46, 30, 62, 1, 33, 17, 49, 9, 41, 25, 57, 5, 37, 21, 53, 13, 45,
          29, 61, 3, 35, 19, 51, 11, 43, 27, 59, 7, 39, 23, 55, 15, 47, 31, 63
        },
        {
          0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120, 4, 68, 36, 100, 20, 84,
          52, 116, 12, 76, 44, 108, 28, 92, 60, 124, 2, 66, 34, 98, 18, 82, 50, 114, 10, 74, 42,
          106, 26, 90, 58, 122, 6, 70, 38, 102, 22, 86, 54, 118, 14, 78, 46, 110, 30, 94, 62, 126,
          1, 65, 33, 97, 17, 81, 49, 113, 9, 73, 41, 105, 25, 89, 57, 121, 5, 69, 37, 101, 21, 85,
          53, 117, 13, 77, 45, 109, 29, 93, 61, 125, 3, 67, 35, 99, 19, 83, 51, 115, 11, 75, 43,
          107, 27, 91, 59, 123, 7, 71, 39, 103, 23, 87, 55, 119, 15, 79, 47, 111, 31, 95, 63, 127
        },
        {
          0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200,
          40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100,
          228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156,
          92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178,
          114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6,
          134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206,
          46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225,
          17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217,
          57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117,
          245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67,
          195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171,
          107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23,
          151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223,
          63, 191, 127, 255
        },
        {
          0, 256, 128, 384, 64, 320, 192, 448, 32, 288, 160, 416, 96, 352, 224, 480, 16, 272, 144,
          400, 80, 336, 208, 464, 48, 304, 176, 432, 112, 368, 240, 496, 8, 264, 136, 392, 72, 328,
          200, 456, 40, 296, 168, 424, 104, 360, 232, 488, 24, 280, 152, 408, 88, 344, 216, 472, 56,
          312, 184, 440, 120, 376, 248, 504, 4, 260, 132, 388, 68, 324, 196, 452, 36, 292, 164, 420,
          100, 356, 228, 484, 20, 276, 148, 404, 84, 340, 212, 468, 52, 308, 180, 436, 116, 372,
          244, 500, 12, 268, 140, 396, 76, 332, 204, 460, 44, 300, 172, 428, 108, 364, 236, 492, 28,
          284, 156, 412, 92, 348, 220, 476, 60, 316, 188, 444, 124, 380, 252, 508, 2, 258, 130, 386,
          66, 322, 194, 450, 34, 290, 162, 418, 98, 354, 226, 482, 18, 274, 146, 402, 82, 338, 210,
          466, 50, 306, 178, 434, 114, 370, 242, 498, 10, 266, 138, 394, 74, 330, 202, 458, 42, 298,
          170, 426, 106, 362, 234, 490, 26, 282, 154, 410, 90, 346, 218, 474, 58, 314, 186, 442,
          122, 378, 250, 506, 6, 262, 134, 390, 70, 326, 198, 454, 38, 294, 166, 422, 102, 358, 230,
          486, 22, 278, 150, 406, 86, 342, 214, 470, 54, 310, 182, 438, 118, 374, 246, 502, 14, 270,
          142, 398, 78, 334, 206, 462, 46, 302, 174, 430, 110, 366, 238, 494, 30, 286, 158, 414, 94,
          350, 222, 478, 62, 318, 190, 446, 126, 382, 254, 510, 1, 257, 129, 385, 65, 321, 193, 449,
          33, 289, 161, 417, 97, 353, 225, 481, 17, 273, 145, 401, 81, 337, 209, 465, 49, 305, 177,
          433, 113, 369, 241, 497, 9, 265, 137, 393, 73, 329, 201, 457, 41, 297, 169, 425, 105, 361,
          233, 489, 25, 281, 153, 409, 89, 345, 217, 473, 57, 313, 185, 441, 121, 377, 249, 505, 5,
          261, 133, 389, 69, 325, 197, 453, 37, 293, 165, 421, 101, 357, 229, 485, 21, 277, 149,
          405, 85, 341, 213, 469, 53, 309, 181, 437, 117, 373, 245, 501, 13, 269, 141, 397, 77, 333,
          205, 461, 45, 301, 173, 429, 109, 365, 237, 493, 29, 285, 157, 413, 93, 349, 221, 477, 61,
          317, 189, 445, 125, 381, 253, 509, 3, 259, 131, 387, 67, 323, 195, 451, 35, 291, 163, 419,
          99, 355, 227, 483, 19, 275, 147, 403, 83, 339, 211, 467, 51, 307, 179, 435, 115, 371, 243,
          499, 11, 267, 139, 395, 75, 331, 203, 459, 43, 299, 171, 427, 107, 363, 235, 491, 27, 283,
          155, 411, 91, 347, 219, 475, 59, 315, 187, 443, 123, 379, 251, 507, 7, 263, 135, 391, 71,
          327, 199, 455, 39, 295, 167, 423, 103, 359, 231, 487, 23, 279, 151, 407, 87, 343, 215,
          471, 55, 311, 183, 439, 119, 375, 247, 503, 15, 271, 143, 399, 79, 335, 207, 463, 47, 303,
          175, 431, 111, 367, 239, 495, 31, 287, 159, 415, 95, 351, 223, 479, 63, 319, 191, 447,
          127, 383, 255, 511
        },
        {
          0, 512, 256, 768, 128, 640, 384, 896, 64, 576, 320, 832, 192, 704, 448, 960, 32, 544, 288,
          800, 160, 672, 416, 928, 96, 608, 352, 864, 224, 736, 480, 992, 16, 528, 272, 784, 144,
          656, 400, 912, 80, 592, 336, 848, 208, 720, 464, 976, 48, 560, 304, 816, 176, 688, 432,
          944, 112, 624, 368, 880, 240, 752, 496, 1008, 8, 520, 264, 776, 136, 648, 392, 904, 72,
          584, 328, 840, 200, 712, 456, 968, 40, 552, 296, 808, 168, 680, 424, 936, 104, 616, 360,
          872, 232, 744, 488, 1000, 24, 536, 280, 792, 152, 664, 408, 920, 88, 600, 344, 856, 216,
          728, 472, 984, 56, 568, 312, 824, 184, 696, 440, 952, 120, 632, 376, 888, 248, 760, 504,
          1016, 4, 516, 260, 772, 132, 644, 388, 900, 68, 580, 324, 836, 196, 708, 452, 964, 36,
          548, 292, 804, 164, 676, 420, 932, 100, 612, 356, 868, 228, 740, 484, 996, 20, 532, 276,
          788, 148, 660, 404, 916, 84, 596, 340, 852, 212, 724, 468, 980, 52, 564, 308, 820, 180,
          692, 436, 948, 116, 628, 372, 884, 244, 756, 500, 1012, 12, 524, 268, 780, 140, 652, 396,
          908, 76, 588, 332, 844, 204, 716, 460, 972, 44, 556, 300, 812, 172, 684, 428, 940, 108,
          620, 364, 876, 236, 748, 492, 1004, 28, 540, 284, 796, 156, 668, 412, 924, 92, 604, 348,
          860, 220, 732, 476, 988, 60, 572, 316, 828, 188, 700, 444, 956, 124, 636, 380, 892, 252,
          764, 508, 1020, 2, 514, 258, 770, 130, 642, 386, 898, 66, 578, 322, 834, 194, 706, 450,
          962, 34, 546, 290, 802, 162, 674, 418, 930, 98, 610, 354, 866, 226, 738, 482, 994, 18,
          530, 274, 786, 146, 658, 402, 914, 82, 594, 338, 850, 210, 722, 466, 978, 50, 562, 306,
          818, 178, 690, 434, 946, 114, 626, 370, 882, 242, 754, 498, 1010, 10, 522, 266, 778, 138,
          650, 394, 906, 74, 586, 330, 842, 202, 714, 458, 970, 42, 554, 298, 810, 170, 682, 426,
          938, 106, 618, 362, 874, 234, 746, 490, 1002, 26, 538, 282, 794, 154, 666, 410, 922, 90,
          602, 346, 858, 218, 730, 474, 986, 58, 570, 314, 826, 186, 698, 442, 954, 122, 634, 378,
          890, 250, 762, 506, 1018, 6, 518, 262, 774, 134, 646, 390, 902, 70, 582, 326, 838, 198,
          710, 454, 966, 38, 550, 294, 806, 166, 678, 422, 934, 102, 614, 358, 870, 230, 742, 486,
          998, 22, 534, 278, 790, 150, 662, 406, 918, 86, 598, 342, 854, 214, 726, 470, 982, 54,
          566, 310, 822, 182, 694, 438, 950, 118, 630, 374, 886, 246, 758, 502, 1014, 14, 526, 270,
          782, 142, 654, 398, 910, 78, 590, 334, 846, 206, 718, 462, 974, 46, 558, 302, 814, 174,
          686, 430, 942, 110, 622, 366, 878, 238, 750, 494, 1006, 30, 542, 286, 798, 158, 670, 414,
          926, 94, 606, 350, 862, 222, 734, 478, 990, 62, 574, 318, 830, 190, 702, 446, 958, 126,
          638, 382, 894, 254, 766, 510, 1022, 1, 513, 257, 769, 129, 641, 385, 897, 65, 577, 321,
          833, 193, 705, 449, 961, 33, 545, 289, 801, 161, 673, 417, 929, 97, 609, 353, 865, 225,
          737, 481, 993, 17, 529, 273, 785, 145, 657, 401, 913, 81, 593, 337, 849, 209, 721, 465,
          977, 49, 561, 305, 817, 177, 689, 433, 945, 113, 625, 369, 881, 241, 753, 497, 1009, 9,
          521, 265, 777, 137, 649, 393, 905, 73, 585, 329, 841, 201, 713, 457, 969, 41, 553, 297,
          809, 169, 681, 425, 937, 105, 617, 361, 873, 233, 745, 489, 1001, 25, 537, 281, 793, 153,
          665, 409, 921, 89, 601, 345, 857, 217, 729, 473, 985, 57, 569, 313, 825, 185, 697, 441,
          953, 121, 633, 377, 889, 249, 761, 505, 1017, 5, 517, 261, 773, 133, 645, 389, 901, 69,
          581, 325, 837, 197, 709, 453, 965, 37, 549, 293, 805, 165, 677, 421, 933, 101, 613, 357,
          869, 229, 741, 485, 997, 21, 533, 277, 789, 149, 661, 405, 917, 85, 597, 341, 853, 213,
          725, 469, 981, 53, 565, 309, 821, 181, 693, 437, 949, 117, 629, 373, 885, 245, 757, 501,
          1013, 13, 525, 269, 781, 141, 653, 397, 909, 77, 589, 333, 845, 205, 717, 461, 973, 45,
          557, 301, 813, 173, 685, 429, 941, 109, 621, 365, 877, 237, 749, 493, 1005, 29, 541, 285,
          797, 157, 669, 413, 925, 93, 605, 349, 861, 221, 733, 477, 989, 61, 573, 317, 829, 189,
          701, 445, 957, 125, 637, 381, 893, 253, 765, 509, 1021, 3, 515, 259, 771, 131, 643, 387,
          899, 67, 579, 323, 835, 195, 707, 451, 963, 35, 547, 291, 803, 163, 675, 419, 931, 99,
          611, 355, 867, 227, 739, 483, 995, 19, 531, 275, 787, 147, 659, 403, 915, 83, 595, 339,
          851, 211, 723, 467, 979, 51, 563, 307, 819, 179, 691, 435, 947, 115, 627, 371, 883, 243,
          755, 499, 1011, 11, 523, 267, 779, 139, 651, 395, 907, 75, 587, 331, 843, 203, 715, 459,
          971, 43, 555, 299, 811, 171, 683, 427, 939, 107, 619, 363, 875, 235, 747, 491, 1003, 27,
          539, 283, 795, 155, 667, 411, 923, 91, 603, 347, 859, 219, 731, 475, 987, 59, 571, 315,
          827, 187, 699, 443, 955, 123, 635, 379, 891, 251, 763, 507, 1019, 7, 519, 263, 775, 135,
          647, 391, 903, 71, 583, 327, 839, 199, 711, 455, 967, 39, 551, 295, 807, 167, 679, 423,
          935, 103, 615, 359, 871, 231, 743, 487, 999, 23, 535, 279, 791, 151, 663, 407, 919, 87,
          599, 343, 855, 215, 727, 471, 983, 55, 567, 311, 823, 183, 695, 439, 951, 119, 631, 375,
          887, 247, 759, 503, 1015, 15, 527, 271, 783, 143, 655, 399, 911, 79, 591, 335, 847, 207,
          719, 463, 975, 47, 559, 303, 815, 175, 687, 431, 943, 111, 623, 367, 879, 239, 751, 495,
          1007, 31, 543, 287, 799, 159, 671, 415, 927, 95, 607, 351, 863, 223, 735, 479, 991, 63,
          575, 319, 831, 191, 703, 447, 959, 127, 639, 383, 895, 255, 767, 511, 1023
        }
      };

  // lookup table for rotations of quadratic boards
  // the first index is the width of the board (1 < n < 8)
  // the second index is an integer representing a single row in a board of that
  // size (n x n)
  // the value at those indices is a board presentation with the first column
  // being a 90 degree rotation of the row and all other fields being empty
  public static final long[][] CLOCKWISE_ROTATIONS =
      new long[][] {
        {},
        {0, 1},
        {0, 1, 4, 5},
        {0, 1, 8, 9, 64, 65, 72, 73},
        {0, 1, 16, 17, 256, 257, 272, 273, 4096, 4097, 4112, 4113, 4352, 4353, 4368, 4369},
        {
          0, 1, 32, 33, 1024, 1025, 1056, 1057, 32768, 32769, 32800, 32801, 33792, 33793, 33824,
          33825, 1048576, 1048577, 1048608, 1048609, 1049600, 1049601, 1049632, 1049633, 1081344,
          1081345, 1081376, 1081377, 1082368, 1082369, 1082400, 1082401
        },
        {
          0,
          1,
          64,
          65,
          4096,
          4097,
          4160,
          4161,
          262144,
          262145,
          262208,
          262209,
          266240,
          266241,
          266304,
          266305,
          16777216,
          16777217,
          16777280,
          16777281,
          16781312,
          16781313,
          16781376,
          16781377,
          17039360,
          17039361,
          17039424,
          17039425,
          17043456,
          17043457,
          17043520,
          17043521,
          1073741824,
          1073741825,
          1073741888,
          1073741889,
          1073745920,
          1073745921,
          1073745984,
          1073745985,
          1074003968,
          1074003969,
          1074004032,
          1074004033,
          1074008064,
          1074008065,
          1074008128,
          1074008129,
          1090519040,
          1090519041,
          1090519104,
          1090519105,
          1090523136,
          1090523137,
          1090523200,
          1090523201,
          1090781184,
          1090781185,
          1090781248,
          1090781249,
          1090785280,
          1090785281,
          1090785344,
          1090785345
        },
        {
          0,
          1,
          128,
          129,
          16384,
          16385,
          16512,
          16513,
          2097152,
          2097153,
          2097280,
          2097281,
          2113536,
          2113537,
          2113664,
          2113665,
          268435456,
          268435457,
          268435584,
          268435585,
          268451840,
          268451841,
          268451968,
          268451969,
          270532608,
          270532609,
          270532736,
          270532737,
          270548992,
          270548993,
          270549120,
          270549121,
          34359738368L,
          34359738369L,
          34359738496L,
          34359738497L,
          34359754752L,
          34359754753L,
          34359754880L,
          34359754881L,
          34361835520L,
          34361835521L,
          34361835648L,
          34361835649L,
          34361851904L,
          34361851905L,
          34361852032L,
          34361852033L,
          34628173824L,
          34628173825L,
          34628173952L,
          34628173953L,
          34628190208L,
          34628190209L,
          34628190336L,
          34628190337L,
          34630270976L,
          34630270977L,
          34630271104L,
          34630271105L,
          34630287360L,
          34630287361L,
          34630287488L,
          34630287489L,
          4398046511104L,
          4398046511105L,
          4398046511232L,
          4398046511233L,
          4398046527488L,
          4398046527489L,
          4398046527616L,
          4398046527617L,
          4398048608256L,
          4398048608257L,
          4398048608384L,
          4398048608385L,
          4398048624640L,
          4398048624641L,
          4398048624768L,
          4398048624769L,
          4398314946560L,
          4398314946561L,
          4398314946688L,
          4398314946689L,
          4398314962944L,
          4398314962945L,
          4398314963072L,
          4398314963073L,
          4398317043712L,
          4398317043713L,
          4398317043840L,
          4398317043841L,
          4398317060096L,
          4398317060097L,
          4398317060224L,
          4398317060225L,
          4432406249472L,
          4432406249473L,
          4432406249600L,
          4432406249601L,
          4432406265856L,
          4432406265857L,
          4432406265984L,
          4432406265985L,
          4432408346624L,
          4432408346625L,
          4432408346752L,
          4432408346753L,
          4432408363008L,
          4432408363009L,
          4432408363136L,
          4432408363137L,
          4432674684928L,
          4432674684929L,
          4432674685056L,
          4432674685057L,
          4432674701312L,
          4432674701313L,
          4432674701440L,
          4432674701441L,
          4432676782080L,
          4432676782081L,
          4432676782208L,
          4432676782209L,
          4432676798464L,
          4432676798465L,
          4432676798592L,
          4432676798593L
        }
      };

  public static final long[][] COUNTER_CLOCKWISE_ROTATIONS =
      new long[][] {
        {},
        {0, 1},
        {0, 4, 1, 5},
        {0, 64, 8, 72, 1, 65, 9, 73},
        {0, 4096, 256, 4352, 16, 4112, 272, 4368, 1, 4097, 257, 4353, 17, 4113, 273, 4369},
        {
          0, 1048576, 32768, 1081344, 1024, 1049600, 33792, 1082368, 32, 1048608, 32800, 1081376,
          1056, 1049632, 33824, 1082400, 1, 1048577, 32769, 1081345, 1025, 1049601, 33793, 1082369,
          33, 1048609, 32801, 1081377, 1057, 1049633, 33825, 1082401
        },
        {
          0,
          1073741824,
          16777216,
          1090519040,
          262144,
          1074003968,
          17039360,
          1090781184,
          4096,
          1073745920,
          16781312,
          1090523136,
          266240,
          1074008064,
          17043456,
          1090785280,
          64,
          1073741888,
          16777280,
          1090519104,
          262208,
          1074004032,
          17039424,
          1090781248,
          4160,
          1073745984,
          16781376,
          1090523200,
          266304,
          1074008128,
          17043520,
          1090785344,
          1,
          1073741825,
          16777217,
          1090519041,
          262145,
          1074003969,
          17039361,
          1090781185,
          4097,
          1073745921,
          16781313,
          1090523137,
          266241,
          1074008065,
          17043457,
          1090785281,
          65,
          1073741889,
          16777281,
          1090519105,
          262209,
          1074004033,
          17039425,
          1090781249,
          4161,
          1073745985,
          16781377,
          1090523201,
          266305,
          1074008129,
          17043521,
          1090785345
        },
        {
          0,
          4398046511104L,
          34359738368L,
          4432406249472L,
          268435456,
          4398314946560L,
          34628173824L,
          4432674684928L,
          2097152,
          4398048608256L,
          34361835520L,
          4432408346624L,
          270532608,
          4398317043712L,
          34630270976L,
          4432676782080L,
          16384,
          4398046527488L,
          34359754752L,
          4432406265856L,
          268451840,
          4398314962944L,
          34628190208L,
          4432674701312L,
          2113536,
          4398048624640L,
          34361851904L,
          4432408363008L,
          270548992,
          4398317060096L,
          34630287360L,
          4432676798464L,
          128,
          4398046511232L,
          34359738496L,
          4432406249600L,
          268435584,
          4398314946688L,
          34628173952L,
          4432674685056L,
          2097280,
          4398048608384L,
          34361835648L,
          4432408346752L,
          270532736,
          4398317043840L,
          34630271104L,
          4432676782208L,
          16512,
          4398046527616L,
          34359754880L,
          4432406265984L,
          268451968,
          4398314963072L,
          34628190336L,
          4432674701440L,
          2113664,
          4398048624768L,
          34361852032L,
          4432408363136L,
          270549120,
          4398317060224L,
          34630287488L,
          4432676798592L,
          1,
          4398046511105L,
          34359738369L,
          4432406249473L,
          268435457,
          4398314946561L,
          34628173825L,
          4432674684929L,
          2097153,
          4398048608257L,
          34361835521L,
          4432408346625L,
          270532609,
          4398317043713L,
          34630270977L,
          4432676782081L,
          16385,
          4398046527489L,
          34359754753L,
          4432406265857L,
          268451841,
          4398314962945L,
          34628190209L,
          4432674701313L,
          2113537,
          4398048624641L,
          34361851905L,
          4432408363009L,
          270548993,
          4398317060097L,
          34630287361L,
          4432676798465L,
          129,
          4398046511233L,
          34359738497L,
          4432406249601L,
          268435585,
          4398314946689L,
          34628173953L,
          4432674685057L,
          2097281,
          4398048608385L,
          34361835649L,
          4432408346753L,
          270532737,
          4398317043841L,
          34630271105L,
          4432676782209L,
          16513,
          4398046527617L,
          34359754881L,
          4432406265985L,
          268451969,
          4398314963073L,
          34628190337L,
          4432674701441L,
          2113665,
          4398048624769L,
          34361852033L,
          4432408363137L,
          270549121,
          4398317060225L,
          34630287489L,
          4432676798593L
        }
      };
  long val;

  int h;

  int w;

  public Board() {}

  public Board(int h, int w) {
    if (h * w > 63) {
      throw new IllegalArgumentException("Boards cannot have more than 63 fields.");
    }
    this.h = h;
    this.w = w;
  }

  Board(int h, int w, long val) {
    this.h = h;
    this.w = w;
    this.val = val;
  }

  public Board(Board b) {
    this.h = b.h;
    this.w = b.w;
    this.val = b.val;
  }

  public boolean isFree(int x, int y) {
    return (val >> (y * w + x) & 1) == 0;
  }

  public boolean isFree(int x, int y, long mask) {
    return (val >> (y * w + x) & mask) == 0;
  }

  // set the value of the bit representing the field (x,y) to 1
  public Board set(int x, int y) {
    val |= 1L << y * w + x;
    return this;
  }

  private long placeShape(long val, int x, int y, long mask) {
    val |= mask << y * w + x;
    return val;
  }

  /* place a shape (e.g. a domino) at the specified coordinates */
  public Board placeShape(int x, int y, long mask) {
    val = placeShape(val, x, y, mask);
    return this;
  }

  private void swap(int x1, int y1, int x2, int y2) {
    swap(y1 * w + x1, y2 * w + x2, 1);
  }

  private void swap(int b1, int b2, int n) {
    long xor = ((val >> b1) ^ (val >> b2)) & ((1L << n) - 1);
    val ^= ((xor << b1) | (xor << b2));
  }

  private void swapRow(int r1, int r2) {
    swap(r1 * w, r2 * w, w);
  }

  /* convert the board to normal form (Juvavum only) */
  public Board normalize() {
    sortRows(rowCounts());
    sortColumns(colCounts());
    return this;
  }

  private int[] rowCounts() {
    int rows[] = new int[h];
    for (int j = 0; j < h; j++) {
      for (int i = 0; i < w; i++) {
        if (isFree(i, j)) {
          rows[j]++;
        }
      }
    }
    return rows;
  }

  private int[] colCounts() {
    int cols[] = new int[w];
    for (int i = 0; i < w; i++) {
      for (int j = 0; j < h; j++) {
        if (isFree(i, j)) {
          cols[i]++;
        }
      }
    }
    return cols;
  }

  /* sort columns by the number of empty fields */
  private void sortRows(int[] row) {
    int help = 0;
    int n = row.length;
    for (int i = 0; i < n - 1; i++) {
      for (int j = n - 1; j > i; j--) {
        if (row[j - 1] > row[j]) {
          help = row[j - 1];
          row[j - 1] = row[j];
          row[j] = help;
          swapRow(j - 1, j);
        }
      }
    }
  }

  /* sort columns by the number of empty fields */
  private void sortColumns(int[] col) {
    int help = 0;
    int n = col.length;
    for (int i = 0; i < n - 1; i++) {
      for (int j = n - 1; j > i; j--) {
        if (col[j - 1] > col[j]) {
          help = col[j - 1];
          col[j - 1] = col[j];
          col[j] = help;
          for (int k = 0; k < h; k++) {
            swap(j - 1, k, j, k);
          }
        }
      }
    }
  }

  //
  // TRANSFORMATIONS
  //

  public Board fliplr() {
    for (int j = 0; j < h; j++) {
      for (int i = 0; i < w / 2; i++) {
        swap(i, j, w - 1 - i, j);
      }
    }
    return this;
  }

  public Board flipud() {
    for (int j = 0; j < h / 2; j++) {
      swapRow(j, h - 1 - j);
    }
    return this;
  }

  public Board rotate180() {
    // this only works for w <= 10 (to keep the lookup table small)
    // if larger boards are needed, add additional values to int[][] FLIPLR or call
    // both fliplr() and flipud() to rotate the board by 180 degrees.
    long tmp = 0;
    for (int j = 0; j < h; j++) {
      int rowValue = (int) (((1 << w) - 1) & (val >> (j * w)));
      tmp = placeShape(tmp, 0, h - j - 1, FLIPLR[w][rowValue]);
    }
    val = tmp;
    return this;
  }

  public Board rotate270() {
    long tmp = 0;
    for (int j = 0; j < h; j++) {
      tmp |= COUNTER_CLOCKWISE_ROTATIONS[h][(int) (((1 << w) - 1) & (val >> (j * w)))] << j;
    }
    val = tmp;
    return this;
  }

  public Board rotate90() {
    long tmp = 0;
    for (int j = 0; j < h; j++) {
      tmp |= CLOCKWISE_ROTATIONS[h][(int) (((1 << w) - 1) & (val >> (j * w)))] << h - j - 1;
    }
    val = tmp;
    return this;
  }

  public Board flipd1() {
    for (int i = 1; i < h; i++) {
      for (int j = 0; j < i; j++) {
        swap(i, j, j, i);
      }
    }
    return this;
  }

  public Board flipd2() {
    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w - 1 - i; j++) {
        swap(i, j, h - 1 - j, w - 1 - i);
      }
    }
    return this;
  }

  public Graph<Integer, SimpleEdge> toGraph() {
    Graph<Integer, SimpleEdge> graph = new SimpleGraph<>(SimpleEdge.class);
    int length = h * w;
    int x, y;
    for (int i = 0; i < length; i++) {
      x = i / w;
      y = i % w;
      if (i % w != w - 1 && isFree(y, x) && isFree(y + 1, x)) {
        graph.addVertex(i);
        graph.addVertex(i + 1);
        graph.addEdge(i, i + 1);
      }
      if (i < w * (h - 1) && isFree(y, x) && isFree(y, x + 1)) {
        graph.addVertex(i);
        graph.addVertex(i + w);
        graph.addEdge(i, i + w);
      }
    }
    return graph;
  }

  @Override
  public String toString() {
    String ret = "";
    for (int i = 0; i < h * w; i++) {
      if (((val >> i) & 1) == 1) {
        ret += ("X ");
      } else {
        ret += ("- ");
      }
      if (i % w == w - 1) {
        ret += "\n";
      }
    }
    return ret;
  }

  // hash code and equals are optimized for speed, so we only include the binary
  // representation (and ignore height and width because we do not usually
  // compare different-sized boards)
  @Override
  public int hashCode() {
    return Long.valueOf(val).hashCode();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    Board other = (Board) obj;
    return other.val == val;
  }
}
